// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_webdomain_backend

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WebdomainBackendResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"asteroid": schema.StringAttribute{
				Required:            true,
				Description:         "Name of a hosting account, e.g. 'isabell'.",
				MarkdownDescription: "Name of a hosting account, e.g. 'isabell'.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"asteroid_name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"destination": schema.StringAttribute{
				Required:            true,
				Description:         "* `APACHE` - Apache\n* `STATIC` - Static\n* `PORT` - Port",
				MarkdownDescription: "* `APACHE` - Apache\n* `STATIC` - Static\n* `PORT` - Port",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"APACHE",
						"STATIC",
						"PORT",
					),
				},
			},
			"domain": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"path": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 1024),
					stringvalidator.RegexMatches(regexp.MustCompile("^/([a-zA-ZüäöÜÄÖß0-9._=-]+/?)*$"), ""),
				},
			},
			"pk": schema.Int64Attribute{
				Computed: true,
			},
			"port": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "TCP port of the upstream HTTP server.",
				MarkdownDescription: "TCP port of the upstream HTTP server.",
				Validators: []validator.Int64{
					int64validator.Between(1024, 65535),
				},
			},
			"remove_prefix": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether to remove the path while proxying, e.g. /ep/123 => /123.",
				MarkdownDescription: "Whether to remove the path while proxying, e.g. /ep/123 => /123.",
				Default:             booldefault.StaticBool(false),
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"webdomain_domain": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^([^/]+\\.[^/]+|-)$"), ""),
				},
			},
		},
	}
}

type WebdomainBackendModel struct {
	Asteroid        types.String `tfsdk:"asteroid"`
	AsteroidName    types.String `tfsdk:"asteroid_name"`
	CreatedAt       types.String `tfsdk:"created_at"`
	Destination     types.String `tfsdk:"destination"`
	Domain          types.String `tfsdk:"domain"`
	Path            types.String `tfsdk:"path"`
	Pk              types.Int64  `tfsdk:"pk"`
	Port            types.Int64  `tfsdk:"port"`
	RemovePrefix    types.Bool   `tfsdk:"remove_prefix"`
	UpdatedAt       types.String `tfsdk:"updated_at"`
	WebdomainDomain types.String `tfsdk:"webdomain_domain"`
}
