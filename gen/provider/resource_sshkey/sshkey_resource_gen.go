// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_sshkey

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SshkeyResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"asteroid": schema.StringAttribute{
				Required:            true,
				Description:         "Name of a hosting account, e.g. 'isabell'.",
				MarkdownDescription: "Name of a hosting account, e.g. 'isabell'.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"asteroid_name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"formatted_key": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "A unique integer value identifying this ssh key.",
				MarkdownDescription: "A unique integer value identifying this ssh key.",
			},
			"key": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 1396),
					stringvalidator.RegexMatches(regexp.MustCompile("[a-z0-9+/=]+"), ""),
				},
			},
			"key_comment": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1024),
				},
			},
			"key_type": schema.StringAttribute{
				Required:            true,
				Description:         "* `sk-ecdsa-sha2-nistp256@openssh.com` - sk-ecdsa-sha2-nistp256@openssh.com\n* `ecdsa-sha2-nistp256` - ecdsa-sha2-nistp256\n* `ecdsa-sha2-nistp384` - ecdsa-sha2-nistp384\n* `ecdsa-sha2-nistp521` - ecdsa-sha2-nistp521\n* `sk-ssh-ed25519@openssh.com` - sk-ssh-ed25519@openssh.com\n* `ssh-ed25519` - ssh-ed25519\n* `ssh-rsa` - ssh-rsa",
				MarkdownDescription: "* `sk-ecdsa-sha2-nistp256@openssh.com` - sk-ecdsa-sha2-nistp256@openssh.com\n* `ecdsa-sha2-nistp256` - ecdsa-sha2-nistp256\n* `ecdsa-sha2-nistp384` - ecdsa-sha2-nistp384\n* `ecdsa-sha2-nistp521` - ecdsa-sha2-nistp521\n* `sk-ssh-ed25519@openssh.com` - sk-ssh-ed25519@openssh.com\n* `ssh-ed25519` - ssh-ed25519\n* `ssh-rsa` - ssh-rsa",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"sk-ecdsa-sha2-nistp256@openssh.com",
						"ecdsa-sha2-nistp256",
						"ecdsa-sha2-nistp384",
						"ecdsa-sha2-nistp521",
						"sk-ssh-ed25519@openssh.com",
						"ssh-ed25519",
						"ssh-rsa",
					),
				},
			},
			"pk": schema.Int64Attribute{
				Computed: true,
			},
			"shortened_key": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type SshkeyModel struct {
	Asteroid     types.String `tfsdk:"asteroid"`
	AsteroidName types.String `tfsdk:"asteroid_name"`
	CreatedAt    types.String `tfsdk:"created_at"`
	FormattedKey types.String `tfsdk:"formatted_key"`
	Id           types.Int64  `tfsdk:"id"`
	Key          types.String `tfsdk:"key"`
	KeyComment   types.String `tfsdk:"key_comment"`
	KeyType      types.String `tfsdk:"key_type"`
	Pk           types.Int64  `tfsdk:"pk"`
	ShortenedKey types.String `tfsdk:"shortened_key"`
	UpdatedAt    types.String `tfsdk:"updated_at"`
}
