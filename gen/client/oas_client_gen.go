// Code generated by ogen, DO NOT EDIT.

package client

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// CreateAsteroidsMaildomains invokes create_asteroids_maildomains operation.
	//
	// POST /api/v1/external/asteroids/{asteroid_name}/maildomains/
	CreateAsteroidsMaildomains(ctx context.Context, request CreateAsteroidsMaildomainsReq, params CreateAsteroidsMaildomainsParams) (*MailDomain, error)
	// CreateAsteroidsMaildomainsUsers invokes create_asteroids_maildomains_users operation.
	//
	// POST /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/
	CreateAsteroidsMaildomainsUsers(ctx context.Context, request CreateAsteroidsMaildomainsUsersReq, params CreateAsteroidsMaildomainsUsersParams) (*MailUser, error)
	// CreateAsteroidsSshkeys invokes create_asteroids_sshkeys operation.
	//
	// POST /api/v1/external/asteroids/{asteroid_name}/sshkeys/
	CreateAsteroidsSshkeys(ctx context.Context, request CreateAsteroidsSshkeysReq, params CreateAsteroidsSshkeysParams) (*SshKey, error)
	// CreateAsteroidsWebdomains invokes create_asteroids_webdomains operation.
	//
	// POST /api/v1/external/asteroids/{asteroid_name}/webdomains/
	CreateAsteroidsWebdomains(ctx context.Context, request CreateAsteroidsWebdomainsReq, params CreateAsteroidsWebdomainsParams) (*WebDomain, error)
	// CreateAsteroidsWebdomainsBackends invokes create_asteroids_webdomains_backends operation.
	//
	// POST /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/
	CreateAsteroidsWebdomainsBackends(ctx context.Context, request CreateAsteroidsWebdomainsBackendsReq, params CreateAsteroidsWebdomainsBackendsParams) (*WebBackend, error)
	// CreateAsteroidsWebdomainsHeaders invokes create_asteroids_webdomains_headers operation.
	//
	// POST /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/
	CreateAsteroidsWebdomainsHeaders(ctx context.Context, request CreateAsteroidsWebdomainsHeadersReq, params CreateAsteroidsWebdomainsHeadersParams) (*WebHeader, error)
	// DeleteAsteroidMaildomain invokes delete_asteroid_maildomain operation.
	//
	// DELETE /api/v1/external/asteroids/{asteroid_name}/maildomains/{domain}/
	DeleteAsteroidMaildomain(ctx context.Context, params DeleteAsteroidMaildomainParams) error
	// DeleteAsteroidMaildomainUser invokes delete_asteroid_maildomain_user operation.
	//
	// DELETE /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/{local}/
	DeleteAsteroidMaildomainUser(ctx context.Context, params DeleteAsteroidMaildomainUserParams) error
	// DeleteAsteroidSshkey invokes delete_asteroid_sshkey operation.
	//
	// DELETE /api/v1/external/asteroids/{asteroid_name}/sshkeys/{id}/
	DeleteAsteroidSshkey(ctx context.Context, params DeleteAsteroidSshkeyParams) error
	// DeleteAsteroidWebdomain invokes delete_asteroid_webdomain operation.
	//
	// DELETE /api/v1/external/asteroids/{asteroid_name}/webdomains/{domain}/
	DeleteAsteroidWebdomain(ctx context.Context, params DeleteAsteroidWebdomainParams) error
	// DeleteAsteroidWebdomainBackend invokes delete_asteroid_webdomain_backend operation.
	//
	// DELETE /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/{path}/
	DeleteAsteroidWebdomainBackend(ctx context.Context, params DeleteAsteroidWebdomainBackendParams) error
	// DeleteAsteroidWebdomainHeader invokes delete_asteroid_webdomain_header operation.
	//
	// DELETE /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/{path}/
	DeleteAsteroidWebdomainHeader(ctx context.Context, params DeleteAsteroidWebdomainHeaderParams) error
	// GetAsteroid invokes get_asteroid operation.
	//
	// GET /api/v1/external/asteroids/{name}/
	GetAsteroid(ctx context.Context, params GetAsteroidParams) (*ExternalAsteroid, error)
	// GetAsteroidMaildomain invokes get_asteroid_maildomain operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/{domain}/
	GetAsteroidMaildomain(ctx context.Context, params GetAsteroidMaildomainParams) (*MailDomain, error)
	// GetAsteroidMaildomainUser invokes get_asteroid_maildomain_user operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/{local}/
	GetAsteroidMaildomainUser(ctx context.Context, params GetAsteroidMaildomainUserParams) (*MailUser, error)
	// GetAsteroidMaildomains invokes get_asteroid_maildomains operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/
	GetAsteroidMaildomains(ctx context.Context, params GetAsteroidMaildomainsParams) (*PaginatedMailDomainList, error)
	// GetAsteroidMaildomainsUsers invokes get_asteroid_maildomains_users operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/
	GetAsteroidMaildomainsUsers(ctx context.Context, params GetAsteroidMaildomainsUsersParams) (*PaginatedMailUserList, error)
	// GetAsteroidSshkey invokes get_asteroid_sshkey operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/sshkeys/{id}/
	GetAsteroidSshkey(ctx context.Context, params GetAsteroidSshkeyParams) (*SshKey, error)
	// GetAsteroidSshkeys invokes get_asteroid_sshkeys operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/sshkeys/
	GetAsteroidSshkeys(ctx context.Context, params GetAsteroidSshkeysParams) (*PaginatedSshKeyList, error)
	// GetAsteroidWebbackend invokes get_asteroid_webbackend operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webbackends/{id}/
	GetAsteroidWebbackend(ctx context.Context, params GetAsteroidWebbackendParams) (*WebBackend, error)
	// GetAsteroidWebbackends invokes get_asteroid_webbackends operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webbackends/
	GetAsteroidWebbackends(ctx context.Context, params GetAsteroidWebbackendsParams) (*PaginatedWebBackendList, error)
	// GetAsteroidWebdomain invokes get_asteroid_webdomain operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{domain}/
	GetAsteroidWebdomain(ctx context.Context, params GetAsteroidWebdomainParams) (*WebDomain, error)
	// GetAsteroidWebdomainBackend invokes get_asteroid_webdomain_backend operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/{path}/
	GetAsteroidWebdomainBackend(ctx context.Context, params GetAsteroidWebdomainBackendParams) (*WebBackend, error)
	// GetAsteroidWebdomainHeader invokes get_asteroid_webdomain_header operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/{path}/
	GetAsteroidWebdomainHeader(ctx context.Context, params GetAsteroidWebdomainHeaderParams) (*WebHeader, error)
	// GetAsteroidWebdomains invokes get_asteroid_webdomains operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/
	GetAsteroidWebdomains(ctx context.Context, params GetAsteroidWebdomainsParams) (*PaginatedWebDomainList, error)
	// GetAsteroidWebdomainsBackends invokes get_asteroid_webdomains_backends operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/
	GetAsteroidWebdomainsBackends(ctx context.Context, params GetAsteroidWebdomainsBackendsParams) (*PaginatedWebBackendList, error)
	// GetAsteroidWebdomainsHeaders invokes get_asteroid_webdomains_headers operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/
	GetAsteroidWebdomainsHeaders(ctx context.Context, params GetAsteroidWebdomainsHeadersParams) (*PaginatedWebHeaderList, error)
	// GetAsteroidWebheader invokes get_asteroid_webheader operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webheaders/{id}/
	GetAsteroidWebheader(ctx context.Context, params GetAsteroidWebheaderParams) (*WebHeader, error)
	// GetAsteroidWebheaders invokes get_asteroid_webheaders operation.
	//
	// GET /api/v1/external/asteroids/{asteroid_name}/webheaders/
	GetAsteroidWebheaders(ctx context.Context, params GetAsteroidWebheadersParams) (*PaginatedWebHeaderList, error)
	// PatchAsteroid invokes patch_asteroid operation.
	//
	// PATCH /api/v1/external/asteroids/{name}/
	PatchAsteroid(ctx context.Context, request PatchAsteroidReq, params PatchAsteroidParams) (*ExternalAsteroid, error)
	// PatchAsteroidMaildomainUser invokes patch_asteroid_maildomain_user operation.
	//
	// PATCH /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/{local}/
	PatchAsteroidMaildomainUser(ctx context.Context, request PatchAsteroidMaildomainUserReq, params PatchAsteroidMaildomainUserParams) (*MailUser, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// CreateAsteroidsMaildomains invokes create_asteroids_maildomains operation.
//
// POST /api/v1/external/asteroids/{asteroid_name}/maildomains/
func (c *Client) CreateAsteroidsMaildomains(ctx context.Context, request CreateAsteroidsMaildomainsReq, params CreateAsteroidsMaildomainsParams) (*MailDomain, error) {
	res, err := c.sendCreateAsteroidsMaildomains(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateAsteroidsMaildomains(ctx context.Context, request CreateAsteroidsMaildomainsReq, params CreateAsteroidsMaildomainsParams) (res *MailDomain, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *CreateAsteroidsMaildomainsApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *CreateAsteroidsMaildomainsApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *MailDomainRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateAsteroidsMaildomainsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAsteroidsMaildomainsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateAsteroidsMaildomainsUsers invokes create_asteroids_maildomains_users operation.
//
// POST /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/
func (c *Client) CreateAsteroidsMaildomainsUsers(ctx context.Context, request CreateAsteroidsMaildomainsUsersReq, params CreateAsteroidsMaildomainsUsersParams) (*MailUser, error) {
	res, err := c.sendCreateAsteroidsMaildomainsUsers(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateAsteroidsMaildomainsUsers(ctx context.Context, request CreateAsteroidsMaildomainsUsersReq, params CreateAsteroidsMaildomainsUsersParams) (res *MailUser, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *CreateAsteroidsMaildomainsUsersApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *CreateAsteroidsMaildomainsUsersApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *MailUserRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	{
		// Encode "maildomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "maildomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.MaildomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/users/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateAsteroidsMaildomainsUsersRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAsteroidsMaildomainsUsersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateAsteroidsSshkeys invokes create_asteroids_sshkeys operation.
//
// POST /api/v1/external/asteroids/{asteroid_name}/sshkeys/
func (c *Client) CreateAsteroidsSshkeys(ctx context.Context, request CreateAsteroidsSshkeysReq, params CreateAsteroidsSshkeysParams) (*SshKey, error) {
	res, err := c.sendCreateAsteroidsSshkeys(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateAsteroidsSshkeys(ctx context.Context, request CreateAsteroidsSshkeysReq, params CreateAsteroidsSshkeysParams) (res *SshKey, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *CreateAsteroidsSshkeysApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *CreateAsteroidsSshkeysApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *SshKeyRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/sshkeys/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateAsteroidsSshkeysRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAsteroidsSshkeysResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateAsteroidsWebdomains invokes create_asteroids_webdomains operation.
//
// POST /api/v1/external/asteroids/{asteroid_name}/webdomains/
func (c *Client) CreateAsteroidsWebdomains(ctx context.Context, request CreateAsteroidsWebdomainsReq, params CreateAsteroidsWebdomainsParams) (*WebDomain, error) {
	res, err := c.sendCreateAsteroidsWebdomains(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateAsteroidsWebdomains(ctx context.Context, request CreateAsteroidsWebdomainsReq, params CreateAsteroidsWebdomainsParams) (res *WebDomain, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *CreateAsteroidsWebdomainsApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *CreateAsteroidsWebdomainsApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *WebDomainRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateAsteroidsWebdomainsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAsteroidsWebdomainsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateAsteroidsWebdomainsBackends invokes create_asteroids_webdomains_backends operation.
//
// POST /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/
func (c *Client) CreateAsteroidsWebdomainsBackends(ctx context.Context, request CreateAsteroidsWebdomainsBackendsReq, params CreateAsteroidsWebdomainsBackendsParams) (*WebBackend, error) {
	res, err := c.sendCreateAsteroidsWebdomainsBackends(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateAsteroidsWebdomainsBackends(ctx context.Context, request CreateAsteroidsWebdomainsBackendsReq, params CreateAsteroidsWebdomainsBackendsParams) (res *WebBackend, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *CreateAsteroidsWebdomainsBackendsApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *CreateAsteroidsWebdomainsBackendsApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *WebBackendRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/backends/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateAsteroidsWebdomainsBackendsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAsteroidsWebdomainsBackendsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateAsteroidsWebdomainsHeaders invokes create_asteroids_webdomains_headers operation.
//
// POST /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/
func (c *Client) CreateAsteroidsWebdomainsHeaders(ctx context.Context, request CreateAsteroidsWebdomainsHeadersReq, params CreateAsteroidsWebdomainsHeadersParams) (*WebHeader, error) {
	res, err := c.sendCreateAsteroidsWebdomainsHeaders(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateAsteroidsWebdomainsHeaders(ctx context.Context, request CreateAsteroidsWebdomainsHeadersReq, params CreateAsteroidsWebdomainsHeadersParams) (res *WebHeader, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *CreateAsteroidsWebdomainsHeadersApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *CreateAsteroidsWebdomainsHeadersApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *WebHeaderRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/headers/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateAsteroidsWebdomainsHeadersRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAsteroidsWebdomainsHeadersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAsteroidMaildomain invokes delete_asteroid_maildomain operation.
//
// DELETE /api/v1/external/asteroids/{asteroid_name}/maildomains/{domain}/
func (c *Client) DeleteAsteroidMaildomain(ctx context.Context, params DeleteAsteroidMaildomainParams) error {
	_, err := c.sendDeleteAsteroidMaildomain(ctx, params)
	return err
}

func (c *Client) sendDeleteAsteroidMaildomain(ctx context.Context, params DeleteAsteroidMaildomainParams) (res *DeleteAsteroidMaildomainNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	{
		// Encode "domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Domain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAsteroidMaildomainResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAsteroidMaildomainUser invokes delete_asteroid_maildomain_user operation.
//
// DELETE /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/{local}/
func (c *Client) DeleteAsteroidMaildomainUser(ctx context.Context, params DeleteAsteroidMaildomainUserParams) error {
	_, err := c.sendDeleteAsteroidMaildomainUser(ctx, params)
	return err
}

func (c *Client) sendDeleteAsteroidMaildomainUser(ctx context.Context, params DeleteAsteroidMaildomainUserParams) (res *DeleteAsteroidMaildomainUserNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	{
		// Encode "maildomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "maildomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.MaildomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/users/"
	{
		// Encode "local" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "local",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Local))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAsteroidMaildomainUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAsteroidSshkey invokes delete_asteroid_sshkey operation.
//
// DELETE /api/v1/external/asteroids/{asteroid_name}/sshkeys/{id}/
func (c *Client) DeleteAsteroidSshkey(ctx context.Context, params DeleteAsteroidSshkeyParams) error {
	_, err := c.sendDeleteAsteroidSshkey(ctx, params)
	return err
}

func (c *Client) sendDeleteAsteroidSshkey(ctx context.Context, params DeleteAsteroidSshkeyParams) (res *DeleteAsteroidSshkeyNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/sshkeys/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAsteroidSshkeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAsteroidWebdomain invokes delete_asteroid_webdomain operation.
//
// DELETE /api/v1/external/asteroids/{asteroid_name}/webdomains/{domain}/
func (c *Client) DeleteAsteroidWebdomain(ctx context.Context, params DeleteAsteroidWebdomainParams) error {
	_, err := c.sendDeleteAsteroidWebdomain(ctx, params)
	return err
}

func (c *Client) sendDeleteAsteroidWebdomain(ctx context.Context, params DeleteAsteroidWebdomainParams) (res *DeleteAsteroidWebdomainNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Domain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAsteroidWebdomainResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAsteroidWebdomainBackend invokes delete_asteroid_webdomain_backend operation.
//
// DELETE /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/{path}/
func (c *Client) DeleteAsteroidWebdomainBackend(ctx context.Context, params DeleteAsteroidWebdomainBackendParams) error {
	_, err := c.sendDeleteAsteroidWebdomainBackend(ctx, params)
	return err
}

func (c *Client) sendDeleteAsteroidWebdomainBackend(ctx context.Context, params DeleteAsteroidWebdomainBackendParams) (res *DeleteAsteroidWebdomainBackendNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/backends/"
	{
		// Encode "path" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "path",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Path))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAsteroidWebdomainBackendResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAsteroidWebdomainHeader invokes delete_asteroid_webdomain_header operation.
//
// DELETE /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/{path}/
func (c *Client) DeleteAsteroidWebdomainHeader(ctx context.Context, params DeleteAsteroidWebdomainHeaderParams) error {
	_, err := c.sendDeleteAsteroidWebdomainHeader(ctx, params)
	return err
}

func (c *Client) sendDeleteAsteroidWebdomainHeader(ctx context.Context, params DeleteAsteroidWebdomainHeaderParams) (res *DeleteAsteroidWebdomainHeaderNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/headers/"
	{
		// Encode "path" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "path",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Path))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAsteroidWebdomainHeaderResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroid invokes get_asteroid operation.
//
// GET /api/v1/external/asteroids/{name}/
func (c *Client) GetAsteroid(ctx context.Context, params GetAsteroidParams) (*ExternalAsteroid, error) {
	res, err := c.sendGetAsteroid(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroid(ctx context.Context, params GetAsteroidParams) (res *ExternalAsteroid, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Name))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidMaildomain invokes get_asteroid_maildomain operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/{domain}/
func (c *Client) GetAsteroidMaildomain(ctx context.Context, params GetAsteroidMaildomainParams) (*MailDomain, error) {
	res, err := c.sendGetAsteroidMaildomain(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidMaildomain(ctx context.Context, params GetAsteroidMaildomainParams) (res *MailDomain, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	{
		// Encode "domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Domain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidMaildomainResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidMaildomainUser invokes get_asteroid_maildomain_user operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/{local}/
func (c *Client) GetAsteroidMaildomainUser(ctx context.Context, params GetAsteroidMaildomainUserParams) (*MailUser, error) {
	res, err := c.sendGetAsteroidMaildomainUser(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidMaildomainUser(ctx context.Context, params GetAsteroidMaildomainUserParams) (res *MailUser, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	{
		// Encode "maildomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "maildomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.MaildomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/users/"
	{
		// Encode "local" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "local",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Local))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidMaildomainUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidMaildomains invokes get_asteroid_maildomains operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/
func (c *Client) GetAsteroidMaildomains(ctx context.Context, params GetAsteroidMaildomainsParams) (*PaginatedMailDomainList, error) {
	res, err := c.sendGetAsteroidMaildomains(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidMaildomains(ctx context.Context, params GetAsteroidMaildomainsParams) (res *PaginatedMailDomainList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidMaildomainsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidMaildomainsUsers invokes get_asteroid_maildomains_users operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/
func (c *Client) GetAsteroidMaildomainsUsers(ctx context.Context, params GetAsteroidMaildomainsUsersParams) (*PaginatedMailUserList, error) {
	res, err := c.sendGetAsteroidMaildomainsUsers(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidMaildomainsUsers(ctx context.Context, params GetAsteroidMaildomainsUsersParams) (res *PaginatedMailUserList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	{
		// Encode "maildomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "maildomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.MaildomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/users/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidMaildomainsUsersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidSshkey invokes get_asteroid_sshkey operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/sshkeys/{id}/
func (c *Client) GetAsteroidSshkey(ctx context.Context, params GetAsteroidSshkeyParams) (*SshKey, error) {
	res, err := c.sendGetAsteroidSshkey(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidSshkey(ctx context.Context, params GetAsteroidSshkeyParams) (res *SshKey, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/sshkeys/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidSshkeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidSshkeys invokes get_asteroid_sshkeys operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/sshkeys/
func (c *Client) GetAsteroidSshkeys(ctx context.Context, params GetAsteroidSshkeysParams) (*PaginatedSshKeyList, error) {
	res, err := c.sendGetAsteroidSshkeys(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidSshkeys(ctx context.Context, params GetAsteroidSshkeysParams) (res *PaginatedSshKeyList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/sshkeys/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidSshkeysResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebbackend invokes get_asteroid_webbackend operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webbackends/{id}/
func (c *Client) GetAsteroidWebbackend(ctx context.Context, params GetAsteroidWebbackendParams) (*WebBackend, error) {
	res, err := c.sendGetAsteroidWebbackend(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebbackend(ctx context.Context, params GetAsteroidWebbackendParams) (res *WebBackend, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webbackends/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebbackendResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebbackends invokes get_asteroid_webbackends operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webbackends/
func (c *Client) GetAsteroidWebbackends(ctx context.Context, params GetAsteroidWebbackendsParams) (*PaginatedWebBackendList, error) {
	res, err := c.sendGetAsteroidWebbackends(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebbackends(ctx context.Context, params GetAsteroidWebbackendsParams) (res *PaginatedWebBackendList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webbackends/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebbackendsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebdomain invokes get_asteroid_webdomain operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{domain}/
func (c *Client) GetAsteroidWebdomain(ctx context.Context, params GetAsteroidWebdomainParams) (*WebDomain, error) {
	res, err := c.sendGetAsteroidWebdomain(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebdomain(ctx context.Context, params GetAsteroidWebdomainParams) (res *WebDomain, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Domain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebdomainResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebdomainBackend invokes get_asteroid_webdomain_backend operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/{path}/
func (c *Client) GetAsteroidWebdomainBackend(ctx context.Context, params GetAsteroidWebdomainBackendParams) (*WebBackend, error) {
	res, err := c.sendGetAsteroidWebdomainBackend(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebdomainBackend(ctx context.Context, params GetAsteroidWebdomainBackendParams) (res *WebBackend, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/backends/"
	{
		// Encode "path" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "path",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Path))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebdomainBackendResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebdomainHeader invokes get_asteroid_webdomain_header operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/{path}/
func (c *Client) GetAsteroidWebdomainHeader(ctx context.Context, params GetAsteroidWebdomainHeaderParams) (*WebHeader, error) {
	res, err := c.sendGetAsteroidWebdomainHeader(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebdomainHeader(ctx context.Context, params GetAsteroidWebdomainHeaderParams) (res *WebHeader, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/headers/"
	{
		// Encode "path" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "path",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Path))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebdomainHeaderResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebdomains invokes get_asteroid_webdomains operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/
func (c *Client) GetAsteroidWebdomains(ctx context.Context, params GetAsteroidWebdomainsParams) (*PaginatedWebDomainList, error) {
	res, err := c.sendGetAsteroidWebdomains(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebdomains(ctx context.Context, params GetAsteroidWebdomainsParams) (res *PaginatedWebDomainList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebdomainsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebdomainsBackends invokes get_asteroid_webdomains_backends operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/backends/
func (c *Client) GetAsteroidWebdomainsBackends(ctx context.Context, params GetAsteroidWebdomainsBackendsParams) (*PaginatedWebBackendList, error) {
	res, err := c.sendGetAsteroidWebdomainsBackends(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebdomainsBackends(ctx context.Context, params GetAsteroidWebdomainsBackendsParams) (res *PaginatedWebBackendList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/backends/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebdomainsBackendsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebdomainsHeaders invokes get_asteroid_webdomains_headers operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webdomains/{webdomain_domain}/headers/
func (c *Client) GetAsteroidWebdomainsHeaders(ctx context.Context, params GetAsteroidWebdomainsHeadersParams) (*PaginatedWebHeaderList, error) {
	res, err := c.sendGetAsteroidWebdomainsHeaders(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebdomainsHeaders(ctx context.Context, params GetAsteroidWebdomainsHeadersParams) (res *PaginatedWebHeaderList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webdomains/"
	{
		// Encode "webdomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webdomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebdomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/headers/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebdomainsHeadersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebheader invokes get_asteroid_webheader operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webheaders/{id}/
func (c *Client) GetAsteroidWebheader(ctx context.Context, params GetAsteroidWebheaderParams) (*WebHeader, error) {
	res, err := c.sendGetAsteroidWebheader(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebheader(ctx context.Context, params GetAsteroidWebheaderParams) (res *WebHeader, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webheaders/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebheaderResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAsteroidWebheaders invokes get_asteroid_webheaders operation.
//
// GET /api/v1/external/asteroids/{asteroid_name}/webheaders/
func (c *Client) GetAsteroidWebheaders(ctx context.Context, params GetAsteroidWebheadersParams) (*PaginatedWebHeaderList, error) {
	res, err := c.sendGetAsteroidWebheaders(ctx, params)
	return res, err
}

func (c *Client) sendGetAsteroidWebheaders(ctx context.Context, params GetAsteroidWebheadersParams) (res *PaginatedWebHeaderList, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webheaders/"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAsteroidWebheadersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PatchAsteroid invokes patch_asteroid operation.
//
// PATCH /api/v1/external/asteroids/{name}/
func (c *Client) PatchAsteroid(ctx context.Context, request PatchAsteroidReq, params PatchAsteroidParams) (*ExternalAsteroid, error) {
	res, err := c.sendPatchAsteroid(ctx, request, params)
	return res, err
}

func (c *Client) sendPatchAsteroid(ctx context.Context, request PatchAsteroidReq, params PatchAsteroidParams) (res *ExternalAsteroid, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *PatchAsteroidReqEmptyBody:
		// Validation is not needed for the empty body type.
	case *PatchAsteroidApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *PatchAsteroidApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *PatchedExternalAsteroidRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Name))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PATCH", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePatchAsteroidRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePatchAsteroidResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PatchAsteroidMaildomainUser invokes patch_asteroid_maildomain_user operation.
//
// PATCH /api/v1/external/asteroids/{asteroid_name}/maildomains/{maildomain_domain}/users/{local}/
func (c *Client) PatchAsteroidMaildomainUser(ctx context.Context, request PatchAsteroidMaildomainUserReq, params PatchAsteroidMaildomainUserParams) (*MailUser, error) {
	res, err := c.sendPatchAsteroidMaildomainUser(ctx, request, params)
	return res, err
}

func (c *Client) sendPatchAsteroidMaildomainUser(ctx context.Context, request PatchAsteroidMaildomainUserReq, params PatchAsteroidMaildomainUserParams) (res *MailUser, err error) {
	// Validate request before sending.
	switch request := request.(type) {
	case *PatchAsteroidMaildomainUserReqEmptyBody:
		// Validation is not needed for the empty body type.
	case *PatchAsteroidMaildomainUserApplicationJSON:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *PatchAsteroidMaildomainUserApplicationXWwwFormUrlencoded:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *PatchedMailUserRequestMultipart:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/api/v1/external/asteroids/"
	{
		// Encode "asteroid_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "asteroid_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AsteroidName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/maildomains/"
	{
		// Encode "maildomain_domain" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "maildomain_domain",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.MaildomainDomain))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/users/"
	{
		// Encode "local" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "local",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Local))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PATCH", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePatchAsteroidMaildomainUserRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePatchAsteroidMaildomainUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
