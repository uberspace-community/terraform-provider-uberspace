// Code generated by ogen, DO NOT EDIT.

package client

import (
	"bytes"
	"mime"
	"mime/multipart"
	"net/http"
	"strings"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeCreateAsteroidsMaildomainsRequest(
	req CreateAsteroidsMaildomainsReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *CreateAsteroidsMaildomainsApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *CreateAsteroidsMaildomainsApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Domain))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "alias" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "alias",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Alias.Get(); ok {
					if unwrapped := string(val); true {
						return e.EncodeValue(conv.StringToString(unwrapped))
					}
					return nil
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *MailDomainRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{
			"alias": "application/json; charset=utf-8",
		})
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Domain))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "alias" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "alias",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				var enc jx.Encoder
				func(e *jx.Encoder) {
					if request.Alias.Set {
						request.Alias.Encode(e)
					}
				}(&enc)
				return e.EncodeValue(string(enc.Bytes()))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeCreateAsteroidsMaildomainsUsersRequest(
	req CreateAsteroidsMaildomainsUsersReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *CreateAsteroidsMaildomainsUsersApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *CreateAsteroidsMaildomainsUsersApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Domain.Get(); ok {
					if unwrapped := string(val); true {
						return e.EncodeValue(conv.StringToString(unwrapped))
					}
					return nil
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "name" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Name))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "password_hash" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password_hash",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.PasswordHash.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "alias" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "alias",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Alias.Get(); ok {
					if unwrapped := string(val); true {
						return e.EncodeValue(conv.StringToString(unwrapped))
					}
					return nil
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *MailUserRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{
			"domain": "application/json; charset=utf-8",
			"alias":  "application/json; charset=utf-8",
		})
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				var enc jx.Encoder
				func(e *jx.Encoder) {
					if request.Domain.Set {
						request.Domain.Encode(e)
					}
				}(&enc)
				return e.EncodeValue(string(enc.Bytes()))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "name" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Name))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "password_hash" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password_hash",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.PasswordHash.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "alias" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "alias",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				var enc jx.Encoder
				func(e *jx.Encoder) {
					if request.Alias.Set {
						request.Alias.Encode(e)
					}
				}(&enc)
				return e.EncodeValue(string(enc.Bytes()))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeCreateAsteroidsSshkeysRequest(
	req CreateAsteroidsSshkeysReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *CreateAsteroidsSshkeysApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *CreateAsteroidsSshkeysApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "key_type" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "key_type",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(string(request.KeyType)))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "key" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "key",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Key))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "key_comment" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "key_comment",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.KeyComment.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *SshKeyRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "key_type" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "key_type",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(string(request.KeyType)))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "key" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "key",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Key))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "key_comment" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "key_comment",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.KeyComment.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeCreateAsteroidsWebdomainsRequest(
	req CreateAsteroidsWebdomainsReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *CreateAsteroidsWebdomainsApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *CreateAsteroidsWebdomainsApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Domain))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *WebDomainRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Domain))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeCreateAsteroidsWebdomainsBackendsRequest(
	req CreateAsteroidsWebdomainsBackendsReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *CreateAsteroidsWebdomainsBackendsApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *CreateAsteroidsWebdomainsBackendsApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Domain.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "path" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "path",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Path))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "remove_prefix" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "remove_prefix",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.RemovePrefix.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "destination" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "destination",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(string(request.Destination)))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "port" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "port",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Port.Get(); ok {
					return e.EncodeValue(conv.IntToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *WebBackendRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Domain.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "path" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "path",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Path))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "remove_prefix" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "remove_prefix",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.RemovePrefix.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "destination" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "destination",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(string(request.Destination)))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "port" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "port",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Port.Get(); ok {
					return e.EncodeValue(conv.IntToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeCreateAsteroidsWebdomainsHeadersRequest(
	req CreateAsteroidsWebdomainsHeadersReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *CreateAsteroidsWebdomainsHeadersApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *CreateAsteroidsWebdomainsHeadersApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Domain.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "path" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "path",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Path))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "value" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "value",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Value.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "name" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Name))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *WebHeaderRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "asteroid" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "asteroid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Asteroid))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "domain" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "domain",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Domain.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "path" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "path",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Path))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "value" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "value",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Value.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "name" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(request.Name))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodePatchAsteroidRequest(
	req PatchAsteroidReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *PatchAsteroidReqEmptyBody:
		// Empty body case.
		return nil
	case *PatchAsteroidApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *PatchAsteroidApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "flag_log_error_php" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_log_error_php",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagLogErrorPhp.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "flag_log_error_apache" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_log_error_apache",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagLogErrorApache.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "flag_log_access_nginx" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_log_access_nginx",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagLogAccessNginx.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "flag_page_replace_500" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_page_replace_500",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagPageReplace500.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "password" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Password.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "password_hash" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password_hash",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.PasswordHash.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *PatchedExternalAsteroidRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "flag_log_error_php" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_log_error_php",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagLogErrorPhp.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "flag_log_error_apache" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_log_error_apache",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagLogErrorApache.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "flag_log_access_nginx" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_log_access_nginx",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagLogAccessNginx.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "flag_page_replace_500" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "flag_page_replace_500",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.FlagPageReplace500.Get(); ok {
					return e.EncodeValue(conv.BoolToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "password" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Password.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "password_hash" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password_hash",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.PasswordHash.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodePatchAsteroidMaildomainUserRequest(
	req PatchAsteroidMaildomainUserReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *PatchAsteroidMaildomainUserReqEmptyBody:
		// Empty body case.
		return nil
	case *PatchAsteroidMaildomainUserApplicationJSON:
		const contentType = "application/json"
		e := new(jx.Encoder)
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), contentType)
		return nil
	case *PatchAsteroidMaildomainUserApplicationXWwwFormUrlencoded:
		const contentType = "application/x-www-form-urlencoded"
		request := req

		q := uri.NewFormEncoder(map[string]string{})
		{
			// Encode "password_hash" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password_hash",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.PasswordHash.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "alias" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "alias",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.Alias.Get(); ok {
					if unwrapped := string(val); true {
						return e.EncodeValue(conv.StringToString(unwrapped))
					}
					return nil
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		encoded := q.Values().Encode()
		ht.SetBody(r, strings.NewReader(encoded), contentType)
		return nil
	case *PatchedMailUserRequestMultipart:
		const contentType = "multipart/form-data"
		request := req

		q := uri.NewFormEncoder(map[string]string{
			"alias": "application/json; charset=utf-8",
		})
		{
			// Encode "password_hash" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "password_hash",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				if val, ok := request.PasswordHash.Get(); ok {
					return e.EncodeValue(conv.StringToString(val))
				}
				return nil
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "alias" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "alias",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				var enc jx.Encoder
				func(e *jx.Encoder) {
					if request.Alias.Set {
						request.Alias.Encode(e)
					}
				}(&enc)
				return e.EncodeValue(string(enc.Bytes()))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}
