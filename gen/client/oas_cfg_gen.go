// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/http"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenregex"
)

var regexMap = map[string]ogenregex.Regexp{
	"[a-z0-9+/=]+": ogenregex.MustCompile("[a-z0-9+/=]+"),
	"^(([!#$%&'*+\\-/=?^_`{|}~\\w])|([!#$%&'*+\\-/=?^_`{|}~\\w][!#$%&'*+\\-/=?^_`{|}~\\.\\w]{0,}[!#$%&'*+\\-/=?^_`{|}~\\w]))$": ogenregex.MustCompile("^(([!#$%&'*+\\-/=?^_`{|}~\\w])|([!#$%&'*+\\-/=?^_`{|}~\\w][!#$%&'*+\\-/=?^_`{|}~\\.\\w]{0,}[!#$%&'*+\\-/=?^_`{|}~\\w]))$"),
	"^([^/]+\\.[^/]+|-)$":              ogenregex.MustCompile("^([^/]+\\.[^/]+|-)$"),
	"^([a-zA-Z0-9_]+-)*[a-zA-Z0-9_]+$": ogenregex.MustCompile("^([a-zA-Z0-9_]+-)*[a-zA-Z0-9_]+$"),
	"^(\\$[a-z0-9./-]+){3,}$":          ogenregex.MustCompile("^(\\$[a-z0-9./-]+){3,}$"),
	"^.*$":                             ogenregex.MustCompile("^.*$"),
	"^/([a-zA-ZüäöÜÄÖß0-9._=-]+/?)*$":  ogenregex.MustCompile("^/([a-zA-ZüäöÜÄÖß0-9._=-]+/?)*$"),
	"^[ -~]+$":                         ogenregex.MustCompile("^[ -~]+$"),
	"^[^/]+\\.[^/]+$":                  ogenregex.MustCompile("^[^/]+\\.[^/]+$"),
}

type (
	optionFunc[C any] func(*C)
)

type clientConfig struct {
	Client ht.Client
}

// ClientOption is client config option.
type ClientOption interface {
	applyClient(*clientConfig)
}

var _ ClientOption = (optionFunc[clientConfig])(nil)

func (o optionFunc[C]) applyClient(c *C) {
	o(c)
}

func newClientConfig(opts ...ClientOption) clientConfig {
	cfg := clientConfig{
		Client: http.DefaultClient,
	}
	for _, opt := range opts {
		opt.applyClient(&cfg)
	}
	return cfg
}

type baseClient struct {
	cfg clientConfig
}

func (cfg clientConfig) baseClient() (c baseClient, err error) {
	c = baseClient{cfg: cfg}
	return c, nil
}

// Option is config option.
type Option interface {
	ClientOption
}

// WithClient specifies http client to use.
func WithClient(client ht.Client) ClientOption {
	return optionFunc[clientConfig](func(cfg *clientConfig) {
		if client != nil {
			cfg.Client = client
		}
	})
}
